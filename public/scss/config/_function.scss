@function adjust-color($color, $percentage) {
    @if $percentage >0 {
        @return lighten($color, $percentage);
    }

    @else {
        @return darken($color, abs($percentage));
    }
}


@function px-to-rem($px, $base-font-size: 16px) {
    @return $px / $base-font-size * 1rem;
}

@function strip-unit($value) {
    @return $value / ($value * 0 + 1);
}


@function fluid-font($min-size, $max-size, $min-vw: 320px, $max-vw: 1440px) {
    @return calc(#{px-to-rem($min-size)} + (#{px-to-rem($max-size)} - #{px-to-rem($min-size)}) * ((100vw - $min-vw) / ($max-vw - $min-vw)));
}

@function map-get-safe($map, $key) {
    @return map-get($map, $key);
}

@function color($key) {
    @return map-get-safe($colors, $key);
}

@function spacing($key) {
    @return map-get-safe($spacing-scale, $key);
}

@function breakpoint-min($size) {
    @return map-get(map-get($breakpoints, $size), 'min');
}

@function breakpoint-max($size) {
    @return map-get(map-get($breakpoints, $size), 'max');
}

@function radius($key) {
    @return map-get-safe($border-radius, $key);
}

@function z($key) {
    @return map-get-safe($z-index, $key);
}

@function shadow($key) {
    @return map-get-safe($shadows, $key);
}



// How do I use these functions, for example?

// 1. Adjust Color Brightness

// $primary-color: #3498db;

// button {
//   background-color: adjust-color($primary-color, 20%); // Lightens the color by 20%
//   color: adjust-color($primary-color, -20%); // Darkens the color by 20%
// }


// 2. Convert Pixels to REM

// h1 {
//     font-size: px-to-rem(32px); // Converts 32px to rem based on the default base font size (16px)
//   }

//   p {
//     font-size: px-to-rem(18px, 18px); // Converts 18px to rem based on a custom base font size (18px)
//   }

// 3. Remove Unit from Value

// .container {
//     width: strip-unit(100px) * 2px; // Result: 200px
// }

// 4. Fluid Font Size

// h1 {
//     font-size: fluid-font(16px, 24px); // Scales between 16px and 24px based on viewport width
//   }

// 5. Safe Map Access

// $colors: (
//   primary: #3498db,
//   secondary: #2ecc71
// );

// button {
//   background-color: color('primary'); // Retrieves the primary color from the map
//   border: 1px solid color('secondary'); // Retrieves the secondary color from the map
// }

// 6. Spacing from Map

// $spacing-scale: (
//   small: 8px,
//   medium: 16px,
//   large: 32px
// );

// .container {
//   padding: spacing('medium'); // Applies 16px padding
// }


// 7. Breakpoint Min/Max Width

// $breakpoints: (
//   small: (min: 320px, max: 768px),
//   medium: (min: 769px, max: 1024px),
//   large: (min: 1025px, max: 1440px)
// );

// @media (min-width: breakpoint-min('medium')) and (max-width: breakpoint-max('medium')) {
//   .container {
//     padding: 20px;
//   }
// }

// 8. Border Radius from Map

// $border-radius: (
//   small: 4px,
//   medium: 8px,
//   large: 16px
// );

// .box {
//   border-radius: radius('medium'); // Applies a border-radius of 8px
// }

// 9. Z-Index from Map

// $z-index: (
//   modal: 1000,
//   dropdown: 500
// );

// .modal {
//   z-index: z('modal'); // Applies z-index of 1000
// }

// 10. Shadow from Map

// $shadows: (
//   light: 0 2px 4px rgba(0, 0, 0, 0.1),
//   dark: 0 4px 8px rgba(0, 0, 0, 0.3)
// );

// .card {
//   box-shadow: shadow('light'); // Applies a light shadow
// }
