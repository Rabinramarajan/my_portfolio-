// mixin for spacing
@mixin generate-spacing-utilities($sizes, $property, $name) {
    @for $i from 1 through $sizes {
        $size: $i * 1px;

        // General spacing
        .#{$property}#{$i} {
            #{$name}: $size !important;
        }

        // Specific cases for padding and margin
        @if $property =="p" or $property =="m" {
            .#{$property}t#{$i} {
                #{$name}-top: $size !important;
            }

            .#{$property}b#{$i} {
                #{$name}-bottom: $size !important;
            }

            .#{$property}l#{$i} {
                #{$name}-left: $size !important;
            }

            .#{$property}r#{$i} {
                #{$name}-right: $size !important;
            }

            .#{$property}x#{$i} {
                #{$name}-left: $size !important;
                #{$name}-right: $size !important;
            }

            .#{$property}y#{$i} {
                #{$name}-top: $size !important;
                #{$name}-bottom: $size !important;
            }
        }
    }
}

// mixin for width and height
@mixin generate-dimension-utilities-with-units($sizes, $prefix, $css-property, $unit) {
    @each $size in $sizes {
        .#{$prefix}#{$size} {
            #{$css-property}: #{$size}#{$unit} !important;
        }
    }
}

// mixin for typography
@mixin generate-font-utilities($sizes, $weights) {
    @for $i from 1 through $sizes {
        .fs#{$i} {
            font-size: #{$i}px !important;
        }
    }

    // Generate font-weight utilities
    @each $key, $value in $weights {
        .fw#{$key} {
            font-weight: #{$value} !important;
        }
    }
}

// Mixin for generating flexbox utilities
@mixin generate-flexbox-utilities($options, $prefix, $property) {
    @each $key, $value in $options {
        .#{$prefix}-#{$key} {
            #{$property}: $value !important;
        }
    }
}

// Mixin for generating text alignment utilities
@mixin generate-text-alignment-utilities($options, $property) {
    @each $key, $value in $options {
        .#{$property}-#{$key} {
            #{$property}: $value !important;
        }
    }
}

// Mixin for generating font weight utilities
@mixin generate-font-weight-utilities($weights) {
    @each $key, $value in $weights {
        .#{$key} {
            font-weight: $value !important;
        }
    }
}


$grid-column: 12;
$grid-spacer: 7px;

$breakpoints: (
    sm: 576px,
    md: 768px,
    lg: 992px,
    xl: 1200px,
    xxl: 1400px
);

@mixin make-grid-columns() {
    @each $breakpoint in map-keys($breakpoints) {
        $min: map-get($breakpoints, $breakpoint);

        @for $i from 1 through $grid-column {
            .col-#{$breakpoint}-#{$i} {
                position: relative;
                padding: 0 $grid-spacer;
                flex: 0 0 100%;
                max-width: 100%;
            }
        }

        @media (min-width: $min) {
            @for $i from 1 through $grid-column {
                $width-percentage: calc(#{$i} / #{$grid-column} * 100%);

                .col-#{$breakpoint}-#{$i} {
                    flex: 0 0 $width-percentage;
                    max-width: $width-percentage;
                }
            }
        }
    }
}


// Mixin to apply theme styles
@mixin apply-theme($theme) {
    $theme-map: map-get($themes, $theme);
    background-color: map-get($theme-map, background-color);
    color: map-get($theme-map, text-color);
}