// Mixin for spacing utilities
@mixin generate-spacing-utilities($sizes, $property, $name) {
    @for $i from 1 through $sizes {
        $size: $i * 1px;

        // General spacing
        .#{$property}#{$i} {
            #{$name}: $size !important;
        }

        // Specific cases for padding and margin
        @if $property =="p" or $property =="m" {
            .#{$property}t#{$i} {
                #{$name}-top: $size !important;
            }

            .#{$property}b#{$i} {
                #{$name}-bottom: $size !important;
            }

            .#{$property}l#{$i} {
                #{$name}-left: $size !important;
            }

            .#{$property}r#{$i} {
                #{$name}-right: $size !important;
            }

            .#{$property}x#{$i} {
                #{$name}-left: $size !important;
                #{$name}-right: $size !important;
            }

            .#{$property}y#{$i} {
                #{$name}-top: $size !important;
                #{$name}-bottom: $size !important;
            }
        }
    }
}

// Mixin for width and height utilities with units
@mixin generate-dimension-utilities-with-units($sizes, $prefix, $css-property, $unit) {
    @each $size in $sizes {
        .#{$prefix}#{$size} {
            #{$css-property}: #{$size}#{$unit} !important;
        }
    }
}

// Mixin for typography utilities
@mixin generate-font-utilities($sizes, $weights) {
    @for $i from 1 through $sizes {
        .fs#{$i} {
            font-size: #{$i}px !important;
        }
    }

    // Generate font-weight utilities
    @each $key, $value in $weights {
        .fw#{$key} {
            font-weight: #{$value} !important;
        }
    }
}

// Mixin for generating flexbox utilities
@mixin generate-flexbox-utilities($options, $prefix, $property) {
    @each $key, $value in $options {
        .#{$prefix}-#{$key} {
            #{$property}: $value !important;
        }
    }
}

// Mixin for generating text alignment utilities
@mixin generate-text-alignment-utilities($options, $property) {
    @each $key, $value in $options {
        .#{$property}-#{$key} {
            #{$property}: $value !important;
        }
    }
}

// Grid column and spacer variables
$grid-column: 12;
$grid-spacer: 7px;

// Breakpoints for responsive design
$breakpoints: (
    sm: 576px,
    md: 768px,
    lg: 992px,
    xl: 1200px,
    xxl: 1400px
);

// Mixin to create grid columns
@mixin make-grid-columns() {
    @each $breakpoint in map-keys($breakpoints) {
        $min: map-get($breakpoints, $breakpoint);

        @for $i from 1 through $grid-column {
            .col-#{$breakpoint}-#{$i} {
                position: relative;
                padding: 0 $grid-spacer;
                flex: 0 0 100%;
                max-width: 100%;
            }
        }

        @media (min-width: $min) {
            @for $i from 1 through $grid-column {
                $width-percentage: calc(#{$i} / #{$grid-column} * 100%);

                .col-#{$breakpoint}-#{$i} {
                    flex: 0 0 $width-percentage;
                    max-width: $width-percentage;
                }
            }
        }
    }
}

// Mixin to apply theme styles
@mixin apply-theme($theme) {
    $theme-map: map-get($themes, $theme);
    background-color: map-get($theme-map, background-color);
    color: map-get($theme-map, text-color);
}

@mixin animate($name, $duration: $animation-duration, $easing: $animation-easing, $delay: 0s, $iteration: 1) {
    animation-name: $name;
    animation-duration: $duration;
    animation-timing-function: $easing;
    animation-delay: $delay;
    animation-iteration-count: $iteration;
    animation-fill-mode: both; // Ensures the element stays in the end state
}

// Mixin for Staggered Animations
@mixin stagger($name, $count, $duration: $animation-duration, $easing: $animation-easing, $step: $stagger-step) {
    @for $i from 1 through $count {
        &:nth-child(#{$i}) {
            @include animate($name, $duration, $easing, $step * ($i - 1));
        }
    }
}

@mixin slot-center {
    display: flex;
    justify-content: center;
    align-items: center;
}

@mixin v-flex($displayType: 'column') {
    @if $displayType =='column' {
        display: flex;
        flex-direction: column !important;
    }

    @else if $displayType =='row' {
        display: flex;
        flex-direction: row !important;
    }

    @else if $displayType =='flex' {
        display: flex;
    }

    @else if $displayType =='contents' {
        display: contents;
    }

    @else if $displayType =='inline-flex' {
        display: inline-flex;
    }

    @else {
        display: block !important; // Fallback for other cases
    }
}

@mixin reset-selector {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}