@use "./variables" as v;
@use "sass:color";
@use "sass:map";

@mixin flex-center {
    display: flex;
    align-items: center;
    justify-content: center;
}

@mixin flex-between {
    display: flex;
    align-items: center;
    justify-content: space-between;
}

@mixin button-base {
    padding: v.$spacing-sm v.$spacing-lg;
    border: none;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: all v.$transition-base;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: v.$spacing-xs;

    &:hover {
        transform: translateY(-2px);
    }
}

@mixin card {
    background: v.$bg-card;
    border-radius: 12px;
    padding: v.$spacing-lg;
    border: 1px solid rgba(255, 255, 255, 0.1);
    transition: all v.$transition-base;

    &:hover {
        border-color: rgba(v.$accent-primary, 0.3);
        transform: translateY(-4px);
    }
}

@mixin section-padding {
    padding: v.$spacing-2xl 0;

    @media (max-width: v.$breakpoint-md) {
        padding: v.$spacing-xl 0;
    }
}

@mixin container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 v.$spacing-lg;

    @media (max-width: v.$breakpoint-sm) {
        padding: 0 v.$spacing-md;
    }
}

@mixin flex($direction: row, $align: center, $justify: center, $gap: 0) {
    display: flex;
    flex-direction: $direction;
    align-items: $align;
    justify-content: $justify;

    @if $gap !=0 {
        gap: $gap;
    }
}

@mixin size($width: auto, $height: auto) {
    width: $width;
    height: $height;
}

@mixin border($width: 1px, $style: solid, $color: map.get($colors, border), $side: null) {
    @if $side {
        border-#{$side}: $width $style $color;
    }

    @else {
        border: $width $style $color;
    }
}

@mixin position($type: relative, $top: null, $left: null, $right: null, $bottom: null) {
    position: $type;

    @if $top {
        top: $top;
    }

    @if $left {
        left: $left;
    }

    @if $right {
        right: $right;
    }

    @if $bottom {
        bottom: $bottom;
    }
}

@mixin text-style($family: var(--body-md-font-family),
    $weight: var(--body-md-font-weight),
    $size: var(--body-md-font-size),
    $color: map.get(v.$colors, text-secondary)) {
    font-family: $family;
    font-weight: $weight;
    font-size: $size;
    color: $color;
    letter-spacing: var(--body-md-letter-spacing);
    line-height: var(--body-md-line-height);
    font-style: var(--body-md-font-style);
}

@mixin button-base {
    all: unset;
    box-sizing: border-box;
    @include flex();
    gap: map.get(v.$spacing, md);
    padding: map.get(v.$spacing, md) 12px;
    border-radius: map.get(v.$border-radius, lg);
    cursor: pointer;
    transition: opacity 0.2s ease;

    &:hover {
        opacity: 0.8;
    }

    &:focus {
        outline: 2px solid map.get(v.$colors, accent-blue);
        outline-offset: 2px;
    }
}

/// @param {String} $url - Image URL (e.g. 'image.jpg')
/// @param {Color} $color - Background color (e.g. transparent, #fff)
/// @param {String} $repeat - repeat | no-repeat | repeat-x | repeat-y
/// @param {String} $position - center | top left | 50% 50%
/// @param {String} $size - cover | contain | auto | 100px 100px
/// @param {String} $attachment - scroll | fixed | local
/// @param {String} $origin - padding-box | border-box | content-box
/// @param {String} $clip - border-box | content-box | text
/// @param {String} $blend-mode - normal | multiply | overlay | screen | darken

@mixin background-image-custom($url, $repeat, $position, $size) {
    background-image : url(#{$url});
    background-repeat: $repeat;
    background-position: $position;
    background-size: $size;
}


@mixin slot-center() {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
}